{"version":3,"sources":["components/Portifolio/loadable.js","App.js","serviceWorker.js","index.js"],"names":["LoadableComponent","Loadable","loader","__webpack_require__","e","then","bind","loading","App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","hasLoadedSuccessfully","_this$state","state","error","profile","hasErrorWhileLoading","_this$state2","isLoading","_this$state3","_this2","fetch","response","json","_ref","setState","catch","react_default","a","createElement","loadable","Component","Boolean","window","location","hostname","match","ReactDOM","render","App_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"2MAOeA,QALWC,GAAS,CACjCC,OAAQ,kBAAMC,EAAAC,EAAA,GAAAC,KAAAF,EAAAG,KAAA,WACdC,QAAS,kBAAM,QCDIC,cACnB,SAAAA,EAAYC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACjBE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KA4BRQ,sBAAwB,WAAM,IAAAC,EACQR,EAAKS,MAAjCZ,EADoBW,EACpBX,QAASa,EADWF,EACXE,MAAOC,EADIH,EACJG,QACxB,QAAKd,GAAYa,IAASC,IA/BTX,EAmCnBY,qBAAuB,WAAM,IAAAC,EACAb,EAAKS,MAAxBZ,EADmBgB,EACnBhB,QACR,SAF2BgB,EACVH,OACHb,IArCGG,EAyCnBc,UAAY,WAAM,IAAAC,EACWf,EAAKS,MAAxBZ,EADQkB,EACRlB,QAASa,EADDK,EACCL,MACjB,SAAIb,GAAYa,IAzChBV,EAAKS,MAAQ,CACXE,QAAS,KACTD,OAAO,EACPb,SAAS,GALMG,mFAUC,IAAAgB,EAAAb,KAClBc,MAAM,mDACHtB,KAAK,SAAAuB,GACJA,EAASC,OAAOxB,KAAK,SAAAyB,GAAiB,IAAdT,EAAcS,EAAdT,QACtBK,EAAKK,SAAS,CACZV,UACAd,SAAS,EACTa,OAAO,QAIZY,MAAM,SAAAZ,GACLM,EAAKK,SAAS,CACZX,OAAO,EACPb,SAAS,uCAuBR,IACCc,EAAYR,KAAKM,MAAjBE,QACR,OAAIR,KAAKW,YACAS,EAAAC,EAAAC,cAAA,yBACEtB,KAAKS,uBACPW,EAAAC,EAAAC,cAAA,mBACEtB,KAAKI,wBACPgB,EAAAC,EAAAC,cAACC,EAAD,CAAYf,QAASA,IAEvB,YAzDsBgB,aCSbC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOX,EAAAC,EAAAC,cAACU,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM7C,KAAK,SAAA8C,GACjCA,EAAaC","file":"static/js/main.37dbdd3f.chunk.js","sourcesContent":["import Loadable from \"react-loadable\";\n\nconst LoadableComponent = Loadable({\n  loader: () => import(\"./index\"),\n  loading: () => null\n});\n\nexport default LoadableComponent;\n","import React, { Component } from \"react\";\nimport Portifolio from \"./components/Portifolio/loadable\";\n\nexport default class App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      profile: null,\n      error: false,\n      loading: true\n    };\n  }\n\n  //Load info from API after component has been monted\n  componentDidMount() {\n    fetch(\"http://www.mocky.io/v2/5a5e38f3330000b0261923a5\")\n      .then(response => {\n        response.json().then(({ profile }) => {\n          this.setState({\n            profile,\n            loading: false,\n            error: false\n          });\n        });\n      })\n      .catch(error => {\n        this.setState({\n          error: true,\n          loading: false\n        });\n      });\n  }\n\n  hasLoadedSuccessfully = () => {\n    const { loading, error, profile } = this.state;\n    if (!loading && !error && profile) return true;\n    return false;\n  };\n\n  hasErrorWhileLoading = () => {\n    const { loading, error } = this.state;\n    if (error && !loading) return true;\n    return false;\n  };\n\n  isLoading = () => {\n    const { loading, error } = this.state;\n    if (loading && !error) return true;\n    return false;\n  };\n\n  render() {\n    const { profile } = this.state;\n    if (this.isLoading()) {\n      return <div>Carregando</div>;\n    } else if (this.hasErrorWhileLoading()) {\n      return <div>erro</div>;\n    } else if (this.hasLoadedSuccessfully()) {\n      return <Portifolio profile={profile} />;\n    }\n    return null;\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './assets/styles/_base.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}